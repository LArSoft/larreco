#
# File:    standard_primary_reco_lartpcdetector.fcl
# Purpose: simple reconstruction of events for the "standard" LAr TPC detector
# Date:    July 30th, 2015
# Author:  Gianluca Petrillo (petrillo@fnal.gov)
# Version: 0.1 (broken)
# Input:   file with simulated (or real) raw data
# 
# Description:
# Wire signal calibration, hit finding and clustering for the "standard" LAr TPC
# detector.
# 
# This file is currently unusable since LAr TPC detector has no wire calibration
# module.
#
# Changes:
# 20150730 (petrillo@fnal.gov) [v0.1]
#   original version, based on MicroBooNE's "stage 1" reconstruction
#

#include "messageservice.fcl"
#include "seedservice.fcl"
#include "geometry.fcl"
#include "detectorproperties_lartpcdetector.fcl"
#include "larproperties.fcl"
#include "databaseutil.fcl"
#include "detectorclocks_lartpcdetector.fcl"
#include "seedservice_lartpcdetector.fcl"

#include "services_microboone_simulation.fcl"
#include "larfft.fcl"
#include "caldata_microboone.fcl"

#include "hitfindermodules.fcl"
#include "mchitmodules.fcl"
#include "mcreco.fcl"


process_name: PrimaryReco

services:
{
  scheduler:               { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService:            { fileName: "reco_primary_hist.root" }
  
  TimeTracker:           {}
  MemoryTracker:         {}
  RandomNumberGenerator: {} # ART native random number generator
  NuRandomService:           @local::lartpcdetector_seedservice # from seedservice_lartpcdetector.fcl (larsim)
  
  # LArSoft services
                          @table::standard_geometry_services # from geometry.fcl
  DetectorPropertiesService:     @local::lartpcdetector_detproperties # from detectorproperties_lartpcdetector.fcl
  LArPropertiesService:          @local::standard_properties # from larproperties.fcl
  DetectorClocksService:            @local::lartpcdetector_detectorclocks # from detectorclocks_lartpcdetector.fcl
  DatabaseUtil:           @local::standard_database # from databaseutil.fcl
  
  SignalShapingServiceMicroBooNE: @local::microboone_signalshapingservice
  LArFFT:                 @local::standard_larfft # from larfft.fcl
  
} # services


# source is now a root file from command line
source:
{
  module_type: RootInput
  maxEvents:  10        # Number of events to create
}


# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
  
  producers:
  {
    
    ### random number saver
    rns:                 { module_type: RandomNumberSaver }
    
    ### calwire producers
    caldata:             @local::microboone_calroi
    
    ### hit-finder producers
    gaushit:             @local::gaus_hitfinder
    
    ### cluster-finder producers
    fuzzycluster:        @local::standard_fuzzycluster
    fuzzyclustermerger:  @local::standard_fuzzyclustermerger
    
    ### MC producers
    mchitfinder:         @local::standard_mchitfinder
    mcreco:              @local::standard_mcreco
    
  } # producers
  
  # define the producer and filter modules for this path; order matters.
  # Filters reject all following items (none present here).
  # See lines starting physics.producers above.
  reco: [ rns,
          caldata,
          gaushit,
          fuzzycluster, fuzzyclustermerger
          mchitfinder # , mcreco
          ]
  
  # define the output stream, there could be more than one if using filters
  stream1:  [ out1 ]
  
  # trigger_paths is a keyword and contains the paths that modify art::Event,
  # i.e., filters and producers
  trigger_paths: [ reco ]
  
  # end_paths is a keyword and contains the paths that do not modify art::Event,
  # i.e., analyzers and output streams. These might be run simultaneously.
  end_paths:     [ stream1 ]
  
} # physics

# Block to define where the output goes.
# If you defined a filter in the physics block and put it in the trigger_paths
# then you need to put a SelectEvents: { SelectEvents: [ XXX ] } entry
# in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
  out1:
  {
    module_type: RootOutput
    fileName:    "%ifb_%tc_primary.root"
    compressionLevel: 1
  }
} # outputs
