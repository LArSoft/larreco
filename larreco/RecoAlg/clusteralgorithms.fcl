#include "trackfinderalgorithms.fcl"
#include "cluster3dalgorithms.fcl"
#include "calorimetry.fcl"
#include "kalmanfilterfittrackmakertool.fcl"
BEGIN_PROLOG

standard_trajclusteralg:
{
#   NeutrinoMode: true       # Create neutrino PFParticles & hierarchy?
   NPtsAve: 10              # Number of points to find average charge, Ave chg rms
   MinPtsFit: [4, 3, 3]     # Min number of points in the trajectory fit required on each pass
   MinPts:    [4, 3, 3]     # Min number of points in the trajectory required on each pass
   MaxAngleCode: [0, 1, 2]  # Max angle range code allowed on each pass
   MaxChi: 20               # Max Chi/DOF for accepting a trajectory fit (long muons)
   HitErrFac: 0.4          # hit time error for fitting = fHitErrFac * (hit RMS)
   MinAmp:  1               # Min amplitude for a wire signal being considered present (must be > 0)
   AngleRanges: [50, 85, 90]  # Max angle (degrees) for small, large angle and very large angle trajectories
   MultHitSep: 2.5          # Hits separated by < MultHitSep * RMS may be merged in a trajectory point
   ChargeCuts: [4, 0.15, 0.25]  # [Max(min) chg pull, Min allowed chg RMS, Max allowed chg RMS]
   KinkCuts: [ 8, 5, 1 ]
   # 0 Number of points to fit at the end of the trajectory
   # 1 Minimum kink significance
   # 2 Use charge in significance calculation? (yes if > 0)
   ProjectionErrFactor: 2   # Factor applied to calculated trajectory error
   VLAStepSize: 1.5         # Step size for Very Large Angle trajectories
   JTMaxHitSep: 3           # max hit separation (WSE units) for making Junk Trajectories (<0) turn off
   MaxWireSkipNoSignal:  3  # max allowed number of not-dead wires if no signal is present
   MaxWireSkipWithSignal: 100  # max allowed number of not-dead wires if a signal is present
   QualityCuts: [ 0.8, 3] # Min points/wire, min consecutive pts after a gap
   MuonTag: [40, 500, 40, 3]    # minLength, minMCSMom, maxWireSkip,(min delta-ray length for muon direction tag)
   DeltaRayTag:  [10, 5, 500] # Tag short TJs as delta-rays close to muons [min sep, min MCSMom, max MCSMom]
   ShowerTag: [ 100, 2, 3 ] # Max MCSMom, Max separation (WSE), Min number of trajectories in a shower
   ChkStopCuts: [10, 8, 1.5] # [Min chg slope, nFitPts, Chg fit ChiDOF cut]
   VertexScoreWeights: [1, 2, 10, 2]
    # 0 = Vertex error weight
    # 1 = 3D match weight
    # 2 = Charge fraction of vertex Tjs near the vertex weight
    # 3 = Tj MCSMom, ChgRMS, Angle difference significance between Tjs weight
   Vertex2DCuts:  [6, 8, 45, 3, 3, 50, 0.6, 5, 0.8, 0.8]
   # 0 User definition of a short Tj => max number of Tj points
   # 1 max separation between a vertex and the start of a trajectory for a user-defined short Tj
   # 2 max separation for a user-defined long Tj
   # 3 max position pull when attaching a Tj to a vertex
   # 4 max position error for creating a Tj or attaching Tjs to an existing vertex
   # 5 Min MCSMom of Tjs that can be used to create a vertex
   # 6 min frac of Points/Wire between a vtx and a Tj. Ideally one if the efficiency is good
   # 7 min Score
   # 8 Min charge fraction near a vertex or merge point
   # 9 max MCSmom asymmetry for a merge
   Vertex3DCuts: [0.8, 2., 3.]
   # 0 dX match cut (cm)
   # 1 dY and dZ match cut (cm)
   # 2 max separation btw PFParticle end and 3D vertex
   Match3DCuts: [ 0.5, 10000, 1, 2, 2.0, 2.5, 1000]
   # 0 dx (cm) matching cut
   # 1 max number of 3-plane matches for any Tj
   # 2 Attempt 2-view match?
   # 3 min number of TP3Ds in at least 2 planes to fit in each PFP section
   # 4 max pull for adding/rejecting TP3Ds in sections
   # 5 suggested max ChiDOF for a SectionFit
   # 6 Don't match shower-like Tjs if > nShower-like TPs
   PFPStitchCuts: [ 0.02, 3, 2 ]
   # 0 = matching angle resolution (radians)
   # 1 = matching position resolution (cm)
   # 2 = max angle-position figure of merit
   SkipAlgs: [ ]   # List of algs that should not be used
   DebugConfig: []
}
standard_trajclusteralg.CaloAlg: @local::standard_calorimetryalgmc

standard_clustercrawleralg:
{
  NumPass:              3  # number of passes through the hit list. 0 = no cluster reco
  MaxHitsFit: [ 100,  8, 4] # number of hits fitted to a line
  MinHits:    [ 50,  8, 3] # minimum size of a cluster
  NHitsAve:   [ 20,  8, 2] # number of hits to find the average charge and width
                           # at the end of the cluster. NHitsAve should be 1 or 2
  ChgCut:    [ .8, .8, .8] # max fractional hit charge difference for adding hits
  ChiCut:    [ 4, 8, 10] # stop adding hits to clusters if ChiCut is reached
  MaxWirSkip:   [25, 8, 0] # max number of wires to skip without adding a hit
  MinWirAfterSkip: [2, 2, 1] # min reqd number of consecutive wires with a hit after a skip
  KinkChiRat: [1.2, 1.2, 0.] # Max consecutive chisq increase for the last 3 hits on the cluster
                             # 0. = no kink check when following
  KinkAngCut: [0.4, 0.4, 1.5] # kink angle cut (radians) used to follow and merge
  DoMerge:   [false, true, true] # run cluster merging code?
  TimeDelta: [ 8, 8, 20] # max time difference for cluster merging
  MergeChgCut: [0.8, 0.8, 0.8] # max charge ratio for cluster merging
  FindVertices: [true, true, true]  # make 2D vertices after clustering?
  LACrawl:     [true, true, true]  # crawl Large Angle clusters?
  LAClusAngleCut:       60 # Large cluster angle cut (0 < 90 degrees). <0 to turn off
	LAClusMaxHitsFit: 		 4 #
	MinHitFrac: 				 0.6 # Drop clusters having < (#hits/#wires)
	MinAmp: 			 [5, 5, 5] # Min hit signal amplitude for merging
	ChgNearWindow:				40 # #of ticks for summing charge near a cluster
	ChgNearCut: 				 1.5 # Cluster end is shower-like if (nearby chg)/(cls chg)> cut
  HitMergeChiCut:      2.5 # Merge cluster hit-multiplets if the separation chisq
                           # is < cut. Set < 0 for no merging
  MergeAllHits:      false # merge all hits before reconstructing clusters
  MergeOverlapAngCut:  0.1 # Set <= 0 to turn off overlapping cluster merging
  ChkClusterDS:       true # Check reconstruction at DS end of clusters?
  KillGarbageClusters: 0.1 # Kill ghost clusters, set to 0 to turn off
  VtxClusterSplit:    true # Split clusters that cross vertices
  FindStarVertices:   true # Find vertices with a star topology
  HitErrFac:           0.2 # hit time error for fitting = fHitErrFac * (hit width)
  HitMinAmp:             2 # ignore hits with PH < this value
  ClProjErrFac:          3 # cluster projection error factor
  AllowNoHitWire:        1 # Allow skipping N wires w no hits (if poor purity)
	Vertex2DCut:					10 # Max chisq cut for attaching a cluster to a vtx
  Vertex3DCut:           5 # 2D vtx -> 3D vtx matching cut (chisq)
	FindHammerClusters: true # look for hammer type clusters
  RefineVertexClusters: false # (not ready)
  FindVLAClusters: false # find Very Large Angle clusters (not ready)
  DebugPlane:          -1  # print info only in this plane
  DebugWire:            0  # set to the Begin Wire and Hit of a cluster to print
  DebugHit:             0  # out detailed information while crawling
}

standard_blurredclusteralg:
{
  BlurWire:            6
  BlurTick:            12
  SigmaWire:           4
  SigmaTick:           6
  ClusterWireDistance: 2
  ClusterTickDistance: 2
  MaxTickWidthBlur:    10
  NeighboursThreshold: 0
  MinNeighbours:       0
  MinSize:             2
  MinSeed:             0.1
  TimeThreshold:       500
  ChargeThreshold:     0.07
}

standard_mergeclusteralg:
{
  MinMergeClusterSize: 3
  MaxMergeSeparation:  30
  ProjWidthThreshold:  0.2
}

standard_houghbasealg:
{
  MaxLines:                 50   # The maximum number of Hough lines to look for, 20 had been working!
  MinHits:                  5
  SaveAccumulator:          0
  NumAngleCells:            20000 # The number of angle cells to create for the Hough transform,
  RhoResolutionFactor:      5    # Was set to 5
  MaxDistance:              1.0  # 0.1 was working (okay, not really, larger is probably better,
  MaxSlope:                 80.0 # 80 was working fine previously
  RhoZeroOutRange:          0
  ThetaZeroOutRange:        0
  HitsPerCluster:           1
  MissedHits:               1    # Was set to 0
  MissedHitsDistance:       2.0  #
  MissedHitsToLineSize:     0.25    # Was set to 0
}

standard_endpointalg:
{
  TimeBins:            256
  MaxCorners:          20
  Gsigma:              1.
  Window:              5
  Threshold:           0.1
  SaveVertexMap:       -1
}


standard_cornerfinderalg:
{
  RawDataModuleLabel:           "daq"
  CalDataModuleLabel:		"caldata"
  Trimming_threshold:      10
  Trimming_totalThreshold: 5e4
  Conversion_algorithm:         "standard"
  Conversion_function:          "TMath::Gaus(x,0,1)*TMath::Gaus(y,0,1)"
  Conversion_func_neighborhood: 3
  Conversion_threshold:		0
  Conversion_bins_per_input_x:	1
  Conversion_bins_per_input_y:	1
  Derivative_method: 		"Sobel" #Noble
  Derivative_neighborhood:	1
  Derivative_BlurFunc:	"NotImplemented"
  Derivative_BlurNeighborhood:	5
  CornerScore_Noble_epsilon:    1e-5
  CornerScore_Harris_kappa:     0.05
  CornerScore_neighborhood:	1
  CornerScore_algorithm:	"Nobel" #Harris
  MaxSuppress_neighborhood:	3
  MaxSuppress_threshold:	1000
  Integral_bin_threshold:       5
  Integral_fraction_threshold:  0.95


}

standard_dbscanalg:
{
  eps:    1.0
  epstwo: 1.5
  minPts: 2
  Method: 0   # 0 -- naive findNeighbor implemention
              # 1 -- findNeigbors with R*-tree
              # 2 -- DBScan from the paper with R*-tree
  Metric: 3   # Which RegionQuery distance metric to use.
              # **ONLY APPLIES** if Method is 1 or 2.
              #
	      # 0 -- rectangle (no bad channels) **not implemented**
	      # 1 -- Manhattan distance (only uses eps, no bad channels)
              #                                  **not implemented**
	      # 2 -- Eliptical (no bad channels) **not implemented**
	      # 3 -- findNeighbors-alike: Elliptical and bad
              #                           channel aware (not working)
}

standard_dbscan3dalg:
{
    epsilon:          5.0
    minpts:           2
    neighbors:        100
    badchannelweight: 0.
}

standard_tcshoweralg:
{
    CalorimetryAlg: @local::standard_calorimetryalgmc
    ProjectionMatchingAlg:    @local::standard_projectionmatchingalg
}

standard_fuzzyclusteralg:
{
  RunHough:       true    # Turns on and off the Hough line finder, useful for diagnostics
  NumberTimeBoundaries:             3	# Number of boundaries in ticks for the drift window to be divided up to make the Hough line finder easier on memory
  NumberWireBoundaries:             3	# Number of boundaries in wires for the drift window to be divided up to make the Hough line finder easier on memory
  GenerateHoughLinesOnly:       false # Show only the results of the Hough line finder, hits not in a line will not be clustered
  HoughBaseAlg:{
    MaxLines:             100
    MaxDistance:          1
    MinHits:              5
    NumAngleCells:        10800
    SaveAccumulator:          0
    RhoResolutionFactor:      5
    MaxSlope:                 80.0 # 80 was working fine previously
    RhoZeroOutRange:          0
    ThetaZeroOutRange:        0
    HitsPerCluster:           1
    MissedHits:               1    # Was set to 0
    MissedHitsDistance:       1.0  #
    MissedHitsToLineSize:     0.5    # Was set to 0
  }
  DBScanAlg:                @local::standard_dbscanalg
  DoFuzzyRemnantMerge:      true # Tell the algorithm to merge fuzzy cluster remnants into showers or tracks (0-off, 1-on)
  FuzzyRemnantMergeCutoff: 20    # Cut off on distance from hough line to hit in the remnant of the fuzzy cluster

  DoTrackClusterMerge:     true # Turns on merging of track-like Hough lines (0-off, 1-on)
  ChargeAsymAngleCut:        0.1 # Cut on product of charge asymmetry and the square of the sin of angle between slopes of lines, only for track-like
  SigmaChargeAsymAngleCut:   1.0  # Cut on product of charge sigma asymmetry and the sin of angle between slopes of lines, only for track-like
  TrackClusterMergeCutoff: 5.0 # The maximum distance between track-like Hough line endpoints before they can be merged,

  DoShowerClusterMerge:     true # Turns on merging of shower-like Hough line (0-off, 1-on)
  ShowerClusterMergeAngle: 30    # The maximum angle between slopes of shower-like lines to be merged,
  ShowerClusterMergeCutoff:  7.5 # The maximum distance between shower-like line endpoints before they can be merged,

  DoShowerTrackClusterMerge:     true # Turns on merging of shower-like and track-like lines (0-off, 1-on)
  ShowerTrackClusterMergeAngle:  15   # The maximum angle between slopes of shower-like and track-like lines to be merged,
  ShowerTrackClusterMergeCutoff: 7.5  # The maximum distance between shower-like and track-like line endpoints before they can be merged,
  ShowerLikenessCut:       10    # Cut on shower likeness (the larger the more shower like, the smaller the less shower like)
  MaxVertexLines:          100   # Max number of line end points allowed in a Hough line merge region for a merge to happen
  VertexLinesCutoff:       5.0   #  Size of the vertex region to count up lines for MaxVertexLines
}

standard_clusterparamsalg:
 {
  ChargeCutoffThreshold:    [500,500,1000]
  SelectBoxSizePar:               10     #distance along axis
  SelectBoxSizePerp:              3      #distance perpendicular to axis
  ForceRightGoing:        	  false
  MinHitListSize:		  40
  fOutlierRadius:		  5
  #HoughBaseAlg.NumAngleCells:       3000
  #HoughBaseAlg.RhoResolutionFactor:       4
  #HoughBaseAlg.MaxLines:       100
  HitDensityCutoff:             1.9  # Showers is high, tracks low, 0 don't use cut
  MultiHitWireCutoff: 		 2.1  # Showers is high, tracks low, 0 don't use cut
  OffAxisHitsCutoff:            0    # Showers is high, tracks low, 0 don't use cut
  PrincipalComponentCutoff:     0    # Tracks is high ~1, showers low, 0 don't use cut
  ShowerSelisORorAND:           0    # 0 = OR, 1 = AND

  HoughBaseAlg:                   @local::standard_houghbasealg

 }

 standard_clustermatchalg:
 {
  DebugMode: true
  StoreSpacePoint: true
  MatchAlgoList:                [0, 1, 2, 3] # Algorithms enum to be enabled
  CutParam_NumSpacePoint:       100          # Number of minimum space point to claim a cluster by kSpacePoint
  CutParam_OverlayTimeFraction: 0.0          # Minimum fraction of overlayed time period used by kRoughTime
  CutParam_SumChargeRatio:      1000.0       # Maximum difference in fraction of clusters' charge sum used by kSumCharge
  SpacePointAlg:                @local::microboone_spacepointalg
  }
 standard_clustermatchalg.SpacePointAlg.Filter: false

 standard_clustermergealg:
 {
  VerboseMode:    false
  MaxAngleDiff:   0
  MaxSquaredDist: 0
  }

standard_smallclustalg:
 {
  RadiusSizePar:   	3	  #radius of circle in "cm"
  NHitsInClust:		4	  # Max Number of hits in cluster
  Verbose:			false
 }

standard_clustermatchtq:
{
  KSCut: 0.9
  EnableU: true
  EnableV: true
  EnableZ: true
}

standard_dbscanalg_fast:        @local::standard_dbscanalg
standard_dbscanalg_fast.eps:    1.25
standard_dbscanalg_fast.epstwo: 1.75
standard_dbscanalg_fast.Method: 2

jp250L_dbscanalg:                  @local::standard_dbscanalg
jp250L_fuzzyclusteralg:            @local::standard_fuzzyclusteralg
jp250L_houghbasealg:               @local::standard_houghbasealg
jp250L_houghbasealg.MaxLines:      15
jp250L_houghbasealg.MinHits:       3
jp250L_houghbasealg.NumAngleCells: 5000
jp250L_houghbasealg.MaxDistance:   5.0
jp250L_endpointalg:                @local::standard_endpointalg

bo_dbscanalg:                   @local::standard_dbscanalg
bo_fuzzyclusteralg:             @local::standard_fuzzyclusteralg
bo_houghbasealg:                @local::standard_houghbasealg
bo_houghbasealg.MaxLines:       15
bo_houghbasealg.MinHits:        3
bo_houghbasealg.NumAngleCells:  5000
bo_houghbasealg.MaxDistance:    5.0
bo_endpointalg:                 @local::standard_endpointalg
bo_clustercrawleralg:           @local::standard_clustercrawleralg
bo_clustercrawleralg.NumPass: 1
bo_clustercrawleralg.MaxHitsFit: [ 8 ]
bo_clustercrawleralg.MinHits: [ 3 ]
bo_clustercrawleralg.ChgCut: [ 2. ]
bo_clustercrawleralg.WidCut: [ 2. ]
bo_clustercrawleralg.ChiCut: [ 20. ]
bo_clustercrawleralg.MaxWirSkip: [ 25 ]
bo_clustercrawleralg.MinWirAfterSkip: [ 1 ]
bo_clustercrawleralg.KinkChiRat: [ 2. ]
bo_clustercrawleralg.KinkAngCut: [ 0.5 ]
bo_clustercrawleralg.DoMerge:  [ true ]
bo_clustercrawleralg.TimeDelta:  [ 10. ]
bo_clustercrawleralg.FindVertices: [ false ]
bo_clustercrawleralg.HitErrFac: 1.
bo_clustermatchtq:             @local::standard_clustermatchtq

argoneut_dbscanalg:                  @local::standard_dbscanalg
argoneut_fuzzyclusteralg:            @local::standard_fuzzyclusteralg
argoneut_houghbasealg:               @local::standard_houghbasealg
argoneut_houghbasealg.MaxLines:      15
argoneut_houghbasealg.MinHits:       3
argoneut_houghbasealg.NumAngleCells: 5000
argoneut_houghbasealg.MaxDistance:   5.0
argoneut_endpointalg:                @local::standard_endpointalg
argoneut_cornerfinderalg:		      @local::standard_cornerfinderalg
argoneut_clusterparamsalg:       @local::standard_clusterparamsalg
argoneut_clusterparamsalg.HoughBaseAlg: @local::argoneut_houghbasealg
argoneut_clusterparamsalg.HoughBaseAlg.NumAngleCells:       3000
argoneut_clusterparamsalg.HoughBaseAlg.RhoResolutionFactor:       4
argoneut_clusterparamsalg.HoughBaseAlg.MaxLines:       100
argoneut_clusterparamsalg.ChargeCutoffThreshold:  [200,400]
argoneut_clusterparamsalg.ForceRightGoing:   true
argoneut_smallclustalg:	@local::standard_smallclustalg
argoneut_clustermatchtq:             @local::standard_clustermatchtq
argoneut_clustermatchtq.KSCut:              0.5


microboone_dbscanalg:                         @local::standard_dbscanalg_fast
microboone_endpointalg:                       @local::standard_endpointalg
microboone_houghbasealg:                      @local::standard_houghbasealg
microboone_houghbasealg.MaxLines:             20
microboone_houghbasealg.MaxDistance:          1.0
microboone_houghbasealg.MinHits:              5
microboone_houghbasealg.NumAngleCells:        20000
microboone_houghbasealg.DoHoughLineMerge:     1
microboone_fuzzyclusteralg:                   @local::standard_fuzzyclusteralg
microboone_fuzzyclusteralg.Threshold          : -20.0
microboone_cornerfinderalg:		      @local::standard_cornerfinderalg
microboone_clusterparamsalg:                  @local::standard_clusterparamsalg
microboone_smallclustalg:	              @local::standard_smallclustalg
microboone_clustercrawleralg:                 @local::standard_clustercrawleralg

microboone_trajclusteralg:                    @local::standard_trajclusteralg
microboone_trajclusteralg.MultHitSep: 3.2
microboone_trajclusteralg.MaxWireSkipNoSignal: 2
microboone_trajclusteralg.MuonTag: [40, 500, 10, 3]
microboone_trajclusteralg.VLAStepSize: 1
microboone_trajclusteralg.Vertex2DCuts: [ 6, 8, 45, 3, 3, 50, 0.6, 50, 0.8, 0.8]

microboone_clustermatchalg:                   @local::standard_clustermatchalg
microboone_clustermergealg:                   @local::standard_clustermergealg
microboone_clustermatchtq:                    @local::standard_clustermatchtq

dune35t_dbscanalg:    @local::standard_dbscanalg_fast
dune35t_dbscanalg.eps:    2.0
dune35t_dbscanalg.epstwo: 2.0
dune35t_houghbasealg: @local::standard_houghbasealg
#dune35t_houghbasealg.DoHoughLineMerge:     1
dune35t_endpointalg:  @local::standard_endpointalg
dune35t_fuzzyclusteralg:                   @local::standard_fuzzyclusteralg
dune35t_fuzzyclusteralg.HoughBaseAlg:      @local::dune35t_houghbasealg
#dune35t_fuzzyclusteralg.Threshold:         -50.0
dune35t_clustercrawleralg:                 @local::standard_clustercrawleralg
dune35t_clustermatchtq:                    @local::standard_clustermatchtq
dune35t_clustermatchtq.KSCut:              0.7

dunefd_dbscanalg:    @local::standard_dbscanalg_fast
dunefd_houghbasealg: @local::standard_houghbasealg
dunefd_endpointalg:  @local::standard_endpointalg
dunefd_fuzzyclusteralg:                   @local::standard_fuzzyclusteralg
dunefd_fuzzyclusteralg.HoughBaseAlg:      @local::dunefd_houghbasealg
dunefd_clustercrawleralg:                 @local::standard_clustercrawleralg
dunefd_clustermatchtq:                    @local::standard_clustermatchtq
dunefd_clustermatchtq.KSCut:              0.7


END_PROLOG
