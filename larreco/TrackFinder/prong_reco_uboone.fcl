#include "services_microboone.fcl"
#include "trackfinderservices.fcl"
#include "trackfindermodules.fcl"
#include "mccheatermodules.fcl"
#include "hitfindermodules.fcl"

process_name: ProngReco

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "spacepoint_uboone.root" }
  scheduler:    { wantTracer: true wantSummary: true }
  TimeTracker   {}
  message:   @local::standard_debug
  RandomNumberGenerator: {} #ART native random number generator
}


# services from LArSoft - see definitions for configurations in 
# geometry_microboone.fcl
# services_microboone.fcl
services.WireReadout: @local::microboone_geometry_helper
services.Geometry:           @local::microboone_geo 
services.DetectorPropertiesService: @local::microboone_detproperties
services.LArPropertiesService:      @local::microboone_properties
services.LArFFT:             @local::microboone_larfft  
services.DatabaseUtil:       @local::microboone_database

services.message.destinations.debugmsg.type: "cout"
services.message.destinations.debugmsg.categories.default.limit: 1000000
services.message.destinations.debugmsg.categories.default.reportEvery: 1

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  10        # Number of events to create
}

outputs:
{
  out1:
  {
    module_type: RootOutput
    fileName: "prong_reco.root"
  }
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:{}

 analyzers:{}

 reco:  [ spacepointcheater, spacepointfinderfilt, spacepointfinderall ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [ stream1 ]  

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [reco] 

}

physics.producers.spacepointcheater: @local::standard_spacepointcheater

physics.producers.spacepointfinderfilt: @local::microboone_spacepoint_finder
physics.producers.spacepointfinderfilt.Filter: true
physics.producers.spacepointfinderfilt.Merge: false

physics.producers.spacepointfinderall: @local::microboone_spacepoint_finder
physics.producers.spacepointfinderall.Filter: false
physics.producers.spacepointfinderall.Merge: false
