#include "services_microboone.fcl"
#include "largeantmodules.fcl"
#include "caldata.fcl"
#include "hitfindermodules.fcl"
#include "clustermodules.fcl"
#include "trackfinderservices.fcl"
#include "trackfindermodules.fcl"

process_name: TrkKal

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "recon_hist_Kal_mu_dbs.root" }
  TimeTracker   {}
  MemoryTracker:     { } # default is one
  RandomNumberGenerator: {} #ART native random number generator
}

services.WireReadout: @local::microboone_geometry_helper
services.Geometry:           @local::microboone_geo 
services.LArPropertiesService:      @local::microboone_properties
services.DetectorPropertiesService: @local::microboone_detproperties
services.LArFFT:             @local::microboone_larfft  
services.LArG4Parameters:    @local::microboone_largeantparameters
services.LArVoxelCalculator: @local::microboone_larvoxelcalculator
services.DatabaseUtil:       @local::microboone_database


source:
{
  module_type: RootInput
  fileNames: [ " standard_reco.root" ]
  maxEvents: 5        # Number of events to create
}

outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "recon_Kal_mu.root" #default file name, can override from command line with -o or --output
 }
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   trackkal: @local::microboone_kalman
 }

# filters:{}

 analyzers:
 {
   largana:  @local::microboone_largeantana
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 recon: [ trackkal ]  
 analyze: [ largana ] # trkana
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [ recon ] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [ analyze, stream1 ] # 
}

# set some parameters
physics.producers.trackkal.PosErr3: [0.04, 0.04, 0.04] // cm			       
physics.producers.trackkal.MomErr3: [0.5, 0.5, 0.5] // GeV			       
physics.producers.trackkal.MomStart3: [0.1, 0.1, 1]   // Unitless. Will not be norm'd.
